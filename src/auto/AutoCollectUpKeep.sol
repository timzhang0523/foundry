// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";

interface IBank {
    function collect() external;
}
contract AutoCollectUpKeep {

   address public immutable token;
    address public immutable bank;

  constructor(address _token, address _bank) {
        token = _token;
        bank = _bank;

  }

   function checkUpkeep(bytes calldata /* checkData */) external view returns (bool upkeepNeeded /* bytes memory  performData */) {
    //    upkeepNeeded = (block.timestamp - lastTimeStamp) > interval;
        if(IERC20(token).balanceOf(bank) > 500e18) {
            upkeepNeeded = true;
        }
       // We don't use the checkData in this example. The checkData is defined when the Upkeep was registered
   }

   function performUpkeep(bytes calldata /* performData */) external {
       //We highly recommend revalidating the upkeep in the performUpkeep function
       if(IERC20(token).balanceOf(bank) > 500e18) {
            IBank(bank).collect();
        }
       // We don't use the performData in this example. The performData is generated by the Keeper's call to your checkUpkeep function
   }
}
